@{
    ViewBag.Title = "Index";
}

<form id="formContent" onsubmit="return false;">
    <div class="flow-container">
        <div id="content">
            <div class="content-container">
                <div class="row" style="margin-top:15px;">
                    <div class="col-md-2">
                        <div id="left">
                            <div class="node radius" id="node1">初始状态</div>
                            <div class="node" id="node2">案件登记</div>
                            <div class="node" id="node3">受理立案</div>
                            <div class="node radius" id="node4">调查审理</div>

                            <div class="node" id="node5"><div>rotate旋转</div></div>
                            <div class="node" id="node6">放缩</div>
                            <div class="node" id="node7">skew倾斜</div>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div id="right">
 
                        </div>

                    </div>
                    <div class="col-md-2">
                        <div id="save">
                            <input type="button" value="保存" onclick="save()" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<style type="text/css">
    .dragActive {
        border: 2px dotted orange;
    }

    .dropHover {
        border: 1px dotted red;
    }

    .item {
        border: 1px solid black;
        background-color: #ddddff;
        width: 100px;
        height: 100px;
        position: absolute;
    }

    #node1 {
        left: 20px;
        top: 100px;
        background-color:chocolate
    }

    #node2 {
        left: 20px;
        top: 200px;
        background-color: #485FA5;
    }

    #node3 {
        left: 20px;
        top: 300px;
        background-color: #485FA5;
    }

    #node4 {
        left: 20px;
        top: 400px;
        background-color: #485FA5;

    }

    #node5 {
        left: 50px;
        top: 500px;
        width: 100px;
        height: 100px;
        background-color: #485FA5;
        /* Rotate div */
        transform: rotate(45deg) scale(0.5); /*旋转45度*/
        -ms-transform: rotate(45deg); /* Internet Explorer */
        -webkit-transform: rotate(45deg); /* Chrome */
    }

    #node5 div {

    }

    #node6 {
        left: 50px;
        top: 600px;
        width: 100px;
        height: 100px;
        background-color: #485FA5;
        /* Rotate div */
        transform: scale(1.5,0.6); /*缩放*/
    }

    #node7 {
        left: 50px;
        top: 700px;
        width: 100px;
        height: 100px;
        background-color: #485FA5;
        /* Rotate div */
        transform: skew(25deg,25deg); /*倾斜*/
    }
    #left {
        border: 1px solid red;
        width: 100%;
        height: 1750px;
    }

    #right {
        border: 1px solid #00bfff;
        width: 100%;
        height: 1750px;
    }

    /*#save {
        border: 1px solid green;
    }*/
</style>
<script type="text/javascript">
    //function addEvent(obj, type, handle) {
    //    try {  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本
    //        obj.addEventListener(type, handle, false);
    //    } catch (e) {
    //        try {  // IE8.0及其以下版本
    //            obj.attachEvent('on' + type, handle);
    //        } catch (e) {  // 早期浏览器
    //            obj['on' + type] = handle;
    //        }
    //    }
    //}




    //var _selectedRegions = [];
    ////var selProp;

    //function RegionSelect(selRegionProp) {
    //    //selProp = selRegionProp;
    //    this.regions = [];
    //    this.selProp = selRegionProp;
    //    this.InitRegions(selRegionProp);
    //    this.selectedClass = selRegionProp["selectedClass"];
    //    this.selectedRegion = [];
    //    this.selectDiv = null;
    //    this.startX = null;
    //    this.startY = null;
    //    this.parentId = selRegionProp["parentId"];
    //}

    //RegionSelect.prototype.InitRegions = function () {
    //    var _self = this;
    //    _self.regions = [];
    //    var _regions = document.querySelectorAll(_self.selProp["region"]);//$("#divCenter > .node");//

    //    var bSelect = true;
    //    if (_regions && _regions.length > 0) {
    //        for (var i = 0; i < _regions.length; i++) {
    //            _regions[i].onmousedown = function () {
    //                bSelect = false;
    //                var evt = window.event || arguments[0];
    //                if (!evt.shiftKey && !evt.ctrlKey) {
    //                    if ($.inArray(this, _selectedRegions) === -1) {
    //                        // 清空所有select样式
    //                        _self.clearSelections(_regions);
    //                        this.className += " " + _self.selectedClass;
    //                        // 清空selected数组，并加入当前select中的元素
    //                        _selectedRegions = [];
    //                        _selectedRegions.push(this);
    //                    }
    //                } else {
    //                    if (this.className.indexOf(_self.selectedClass) == -1) {
    //                        this.className += " " + _self.selectedClass;
    //                        _selectedRegions.push(this);
    //                    } else {
    //                        this.className = this.className.replaceAll(_self.selectedClass, "");
    //                        _selectedRegions.remove(this);
    //                    }
    //                }
    //                clearEventBubble(evt);
    //            }
    //            this.regions.push(_regions[i]);
    //        }
    //    }

    //    if (bSelect) {
    //        // 清空所有select样式
    //        _self.clearSelections(_regions);
    //        // 清空selected数组，并加入当前select中的元素
    //        _selectedRegions = [];
    //    }
    //}

    //RegionSelect.prototype.select = function () {
    //    var _self = this;
    //    var sDivId = _self.parentId;
    //    var intMousePosition = [0, 0];
    //    var intOriginalPosition = [0, 0];
    //    var parentWidth = parseInt(document.getElementById(sDivId).parentElement.offsetWidth);
    //    var parentHeight = parseInt(document.getElementById(sDivId).parentElement.offsetHeight);
    //    addEvent("mousedown", function () {
    //        var evt = window.event || arguments[0];
    //        var buttonType = evt.buttons || evt.button;
    //        if (evt.target != undefined) {
    //            if (evt.target.id !== sDivId) return;
    //        }
    //        if (evt.srcElement != undefined) {
    //            if (evt.srcElement.id !== sDivId) return;
    //        }
    //        if (evt.buttons == undefined && buttonType == 0) {
    //            _self.onBeforeSelect(evt, sDivId);
    //        }
    //        if (buttonType === 1) {
    //            _self.onBeforeSelect(evt, sDivId);
    //        }
    //        if (buttonType === 2) {
    //            intMousePosition = [evt.clientX, evt.clientY];
    //            var movX = parseInt(GetStyle(document.getElementById(sDivId), "left"));
    //            var movY = parseInt(GetStyle(document.getElementById(sDivId), "top"));
    //            intOriginalPosition = [movX, movY];
    //            document.getElementById(sDivId).style.cursor = "move";
    //        }
    //        clearEventBubble(evt);
    //    }, document);

    //    addEvent("mousemove", function () {
    //        var evt = window.event || arguments[0];
    //        //if (evt.target.id !== sDivId) return;
    //        var buttonType = evt.buttons || evt.button;
    //        if (evt.buttons == undefined && buttonType == 0) {
    //            _self.onSelect(evt, sDivId);
    //        }
    //        if (buttonType === 1) {
    //            _self.onSelect(evt, sDivId);
    //        }
    //        if (buttonType === 2) {
    //            var newX = intOriginalPosition[0] + evt.clientX - intMousePosition[0];
    //            var newY = intOriginalPosition[1] + evt.clientY - intMousePosition[1];
    //            if (newX >= 0) {
    //                newX = 0;
    //            }
    //            if (newY >= 0) {
    //                newY = 0;
    //            }
    //            $("#" + sDivId).css("left", newX + "px");
    //            $("#" + sDivId).css("top", newY + "px");
    //            $("#" + sDivId).css("width", (parentWidth - newX) + "px");
    //            $("#" + sDivId).css("height", (parentHeight - newY) + "px");

    //        }
    //        clearEventBubble(evt);
    //    }, document);

    //    addEvent("mouseup", function () {
    //        var evt = window.event || arguments[0];
    //        var buttonType = evt.buttons || evt.button;
    //        if (evt.buttons == undefined && buttonType == 0) {
    //        }
    //        if (buttonType === 1) {
    //        }
    //        document.getElementById(sDivId).style.cursor = "default";
    //        _self.onEnd();
    //    }, document);
    //}

    //RegionSelect.prototype.onBeforeSelect = function (evt, sDivId) {
    //    // 创建模拟 选择框
    //    var _self = this;
    //    _self.InitRegions(_self.selProp);
    //    if (!document.getElementById("selContainer")) {
    //        this.selectDiv = document.createElement("div");
    //        this.selectDiv.style.cssText = "position:absolute;width:0px;height:0px;font-size:0px;margin:0px;padding:0px;border:1px dashed #0099FF;background-color:#C3D5ED;z-index:1000;filter:alpha(opacity:60);opacity:0.6;display:none;";
    //        this.selectDiv.id = "selContainer";
    //        document.getElementById(sDivId).appendChild(this.selectDiv);
    //    } else {
    //        this.selectDiv = document.getElementById("selContainer");
    //    }

    //    this.startX = posXY(evt, sDivId).x;
    //    this.startY = posXY(evt, sDivId).y;
    //    this.isSelect = true;

    //}

    //RegionSelect.prototype.onSelect = function (evt, sDivId) {
    //    var self = this;
    //    if (self.isSelect) {
    //        if (self.selectDiv.style.display == "none") self.selectDiv.style.display = "";

    //        var posX = posXY(evt, sDivId).x;
    //        var poxY = posXY(evt, sDivId).y;
    //        self.selectDiv.style.left = Math.min(posX, this.startX) + "px";
    //        self.selectDiv.style.top = Math.min(poxY, this.startY) + "px";
    //        self.selectDiv.style.width = Math.abs(posX - this.startX) + "px";
    //        self.selectDiv.style.height = Math.abs(poxY - this.startY) + "px";

    //        var regionList = self.regions;
    //        for (var i = 0; i < regionList.length; i++) {
    //            if (self.selectDiv.parentNode.id !== regionList[i].parentNode.id) continue;
    //            var r = regionList[i], sr = self.innerRegion(self.selectDiv, r);
    //            if (sr && r.className.indexOf(self.selectedClass) == -1) {
    //                r.className = r.className + " " + self.selectedClass;
    //                _selectedRegions.push(r);
    //            } else if (!sr && r.className.indexOf(self.selectedClass) != -1) {
    //                r.className = r.className.replaceAll(self.selectedClass, "");
    //                _selectedRegions.remove(r);
    //            }

    //        }
    //    }
    //}

    //RegionSelect.prototype.onEnd = function () {
    //    var self = this;
    //    if (self.selectDiv) {
    //        self.selectDiv.style.display = "none";
    //    }
    //    this.isSelect = false;
    //    //_selectedRegions = this.selectedRegion;
    //}

    //// 判断一个区域是否在选择区内
    //RegionSelect.prototype.innerRegion = function (selDiv, region) {
    //    var s_top = parseInt(selDiv.style.top);
    //    var s_left = parseInt(selDiv.style.left);
    //    var s_right = s_left + parseInt(selDiv.offsetWidth);
    //    var s_bottom = s_top + parseInt(selDiv.offsetHeight);

    //    var r_top = parseInt(region.offsetTop);
    //    var r_left = parseInt(region.offsetLeft);
    //    var r_right = r_left + parseInt(region.offsetWidth);
    //    var r_bottom = r_top + parseInt(region.offsetHeight);

    //    var t = Math.max(s_top, r_top);
    //    var r = Math.min(s_right, r_right);
    //    var b = Math.min(s_bottom, r_bottom);
    //    var l = Math.max(s_left, r_left);

    //    if (b > t + 5 && r > l + 5) {
    //        return region;
    //    } else {
    //        return null;
    //    }

    //}

    //RegionSelect.prototype.clearSelections = function (regions) {
    //    for (var i = 0; i < regions.length; i++) {
    //        regions[i].className = regions[i].className.replaceAll(this.selectedClass, "");
    //    }
    //}

    //function getSelectedRegions() {
    //    return _selectedRegions;
    //}

    ///*-------------------------------------- 区域选择方法结束 --------------------------------------------*/

    //function showSelDiv() {
    //    var selInfo = "";
    //    var arr = getSelectedRegions();
    //    for (var i = 0; i < arr.length; i++) {
    //        selInfo += arr[i].innerHTML + "\n";
    //    }

    //    alert("共选择 " + arr.length + " 个文件，分别是：\n" + selInfo);

    //}

    //function MoveSelectDiv(event, ui, id) {
    //    var arr = getSelectedRegions();
    //    var iMoveLeft = ui.position.left - ui.originalPosition.left;
    //    var iMoveTop = ui.position.top - ui.originalPosition.top;

    //    for (var i = 0; i < arr.length; i++) {
    //        //if (arr[i].id === id) continue;

    //        if (arr[i].parentNode.id !== document.getElementById(id).parentNode.id) continue;
    //        var iLeft = parseInt($(arr[i]).attr("bLeft"));
    //        var iTop = parseInt($(arr[i]).attr("bTop"));
    //        $(arr[i]).css("left", (iLeft + iMoveLeft) + "px");
    //        $(arr[i]).css("top", (iTop + iMoveTop) + "px");
    //    }
    //}

    //function startMove() {
    //    var arr = getSelectedRegions();
    //    for (var i = 0; i < arr.length; i++) {
    //        $(arr[i]).attr("bLeft", $(arr[i]).position().left);
    //        $(arr[i]).attr("bTop", $(arr[i]).position().top);
    //    }
    //}





    ////Enter键盘处理事件
    //document.onkeyup = function (e) {
    //    var code = e.charCode || e.keyCode;
    //    if (code == 13) {
    //        //此处编写用户敲回车后的代码  
    //        alert(13);
    //    }
    //} 

    //监测input录入框Enter键后不触发刷新页面的操作
    document.onkeydown = function (e) {
        var e = e || event;
        var currKey = e.keyCode || e.which || e.charCode;//支持IE,Chrome
        if (currKey == 13) {
            return false;
        }
    }

    function save() {
        var connects = [];
        $.each(jsPlumb.getAllConnections(), function (idx, connection) {
            var cont = connection.getLabel();
            connects.push({
                ConnectionId: connection.id,
                PageSourceId: connection.sourceId,
                PageTargetId: connection.targetId,
                SourceText: connection.source.innerText,
                TargetText: connection.target.innerText,
                SourceAnchor: connection.endpoints[0].anchor.type,
                TargetAnchor: connection.endpoints[1].anchor.type,
                ConnectText: $(cont).html()
            });
        });
        var blocks = [];
        $("#right .node").each(function (idx, elem) {
            var $elem = $(elem);
            blocks.push({
                BlockId: $elem.attr('id'),
                BlockContent: $elem.html(),
                BlockX: parseInt($elem.css("left"), 10),
                BlockY: parseInt($elem.css("top"), 10)
            });
        });

        var serliza = JSON.stringify(connects) + "&" + JSON.stringify(blocks);
        $.ajax({
            type: "post",
            url: "../Flow/Ajax",
            data: { data: serliza },
            success: function (filePath) {
                alert(filePath);
                window.open("../Flow/FlowChart?path=" + filePath);
            }
        });
    }
    function doubleclick(id) {
        $(id).dblclick(function () {
            var text = $(this).text();
            $(this).html("");
            $(this).append("<input type='text' value='" + text + "' />");
            $(this).mouseleave(function () {
                $(this).html($("input[type='text']").val());
            });
        });
    }
    var i = 0;
    $(function () {

        ////选中元素的初始化方法
        //var oRegionSelect = new RegionSelect({
        //    region: '#right div.node',
        //    selectedClass: 'seled',
        //    parentId: "right"
        //});
        //oRegionSelect.select();

        //（鼠标按键按下的事件）鼠标在拖拽区域内部选
        $("#right").on("mousedown", function () {
            var evt = window.event || arguments[0];
            var x = evt.clientX;
            var y = evt.clientY;

        });

        $("#left").children().draggable({
            helper: "clone",
            scope: "plaint",
        });
        $("#right").droppable({
            scope: "plaint",
            drop: function (event, ui) {
                var left = parseInt(ui.offset.left - $(this).offset().left);
                var top = parseInt(ui.offset.top - $(this).offset().top);
                var name = ui.draggable[0].id;
                switch (name) {
                    case "node1":
                        i++;
                        var id = "state_start" + i;
                        $(this).append('<div class="node" style="border-radius: 25em;background-color:#485FA5;"  id="' + id + '">' + $(ui.helper).html() + '</div>');
                        $("#" + id).css("left", left).css("top", top);
                        jsPlumb.addEndpoint(id, { anchors: "TopCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "RightMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "BottomCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "LeftMiddle" }, hollowCircle);
                        jsPlumb.draggable(id);
                        $("#" + id).draggable({ containment: "parent" });
                        doubleclick("#" + id);
                        break;
                    case "node2":
                        i++;
                        id = "state_flow" + i;
                        $(this).append('<div class="node" style="background-color:#485FA5;" id="' + id + '">' + $(ui.helper).html() + '</div>');
                        $("#" + id).css("left", left).css("top", top);
                        jsPlumb.addEndpoint(id, { anchors: "TopCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "RightMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "BottomCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "LeftMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, hollowCircle);
                        jsPlumb.draggable(id);
                        $("#" + id).draggable({ containment: "parent" });
                        doubleclick("#" + id);
                        break;
                    case "node3":
                        i++;
                        id = "state_decide" + i;
                        $(this).append('<div class="node"  style="background-color:#485FA5;" id="' + id + '">' + $(ui.helper).html() +'</div>');
                        $("#" + id).css("left", left).css("top", top);
                        jsPlumb.addEndpoint(id, { anchors: "TopCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "RightMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "BottomCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "LeftMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, hollowCircle);
                        jsPlumb.draggable(id);
                        $("#" + id).draggable({ containment: "parent" });
                        doubleclick("#" + id);
                        break;
                    case "node4":
                        i++;
                        id = "state_end" + i;
                        $(this).append('<div class="node" style="border-radius: 25em;background-color:#485FA5;"  id="' + id + '" >' + $(ui.helper).html() + '</div>');
                        $("#" + id).css("left", left).css("top", top);
                        jsPlumb.addEndpoint(id, { anchors: "TopCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "RightMiddle" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "BottomCenter" }, hollowCircle);
                        jsPlumb.addEndpoint(id, { anchors: "LeftMiddle" }, hollowCircle);
                        jsPlumb.draggable(id);
                        $("#" + id).draggable({ containment: "parent" });
                        doubleclick("#" + id);
                        break;
                }
            }
        });




        //$("#right").on("mouseenter", ".node", function () {
        //    $(this).append('<img src="../resources/images/close2.png"  style="position: absolute;" />');
        //    if ($(this).text() == "开始" || $(this).text() == "结束") {
        //        $("img").css("left", 158).css("top", 0);
        //    } else {
        //        $("img").css("left", 158).css("top", -10);
        //    }
        //});
        //$("#right").on("mouseleave", ".node", function () {
        //    $("img").remove();
        //});
        //$("#right").on("click", "img", function () {
        //    if (confirm("确定要删除吗?")) {
        //        jsPlumb.removeAllEndpoints($(this).parent().attr("id"));
        //        $(this).parent().remove();

        //    }
        //});
        //jsPlumb.bind("connection", function (connInfo, originalEvent) {
        //	connInfo.connection.setLabel("ss");
        //});
        var _time = null;
        jsPlumb.bind("dblclick", function (conn, originalEvent) {
            clearTimeout(_time);
            var str = conn.getLabel();
            if (str == null) {
                conn.setLabel("<input type='text' value=' ' />");
            } else {
                conn.setLabel("<input type='text' value='" + $(str).text() + "' />");
            }
            $("input[type='text']").mouseleave(function () {
                if ($(this).val().trim() == "") {
                    conn.setLabel("");
                } else {
                    conn.setLabel("<span style='display:block;padding:10px;opacity: 0.9;height:auto;background-color:white;text-align:center;font-size:12px;color:black;border-radius:0.5em;'>" + $(this).val() + "</span>");
                }
            });
        });

        //jsPlumb.bind("click", function (conn, originalEvent) {
        //	clearTimeout(_time);
        //	_time = setTimeout(function () {
        //		if (confirm("确定删除吗？	"))
        //			jsPlumb.detach(conn);
        //	}, 300);

        //});
        //基本连接线样式
        var connectorPaintStyle = {
            strokeStyle: "#1e8151",
            fillStyle: "transparent",
            radius: 5,
            lineWidth: 2
        };
        // 鼠标悬浮在连接线上的样式
        var connectorHoverStyle = {
            lineWidth: 3,
            strokeStyle: "#216477",
            outlineWidth: 2,
            outlineColor: "white"
        };
        var endpointHoverStyle = {
            fillStyle: "#216477",
            strokeStyle: "#216477"
        };
        //空心圆端点样式设置
        var hollowCircle = {
            endpoint: ["Dot", { radius: 8 }],  //端点的形状
            connectorStyle: connectorPaintStyle,//连接线的颜色，大小样式
            connectorHoverStyle: connectorHoverStyle,
            paintStyle: {
                strokeStyle: "#1e8151",
                fillStyle: "transparent",
                radius: 2,
                lineWidth: 2
            },		//端点的颜色样式
            //anchor: "AutoDefault",
            isSource: true,	//是否可以拖动（作为连线起点）
            connector: ["Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],  //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
            isTarget: true,	//是否可以放置（连线终点）
            maxConnections: -1,	// 设置连接点最多可以连接几条线
            connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
        };
        //实心圆样式
        var solidCircle = {
            endpoint: ["Dot", { radius: 8 }],  //端点的形状
            paintStyle: { fillStyle: "rgb(122, 176, 44)" },	//端点的颜色样式
            connectorStyle: { strokeStyle: "rgb(97, 183, 207)", lineWidth: 4 },	  //连接线的颜色，大小样式
            isSource: true,	//是否可以拖动（作为连线起点）
            connector: ["Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }], //连接线的样式种类有[Bezier],[Flowchart],[StateMachine ],[Straight ]
            isTarget: true,		//是否可以放置（连线终点）
            //anchor: "AutoDefault",
            maxConnections: 3,	// 设置连接点最多可以连接几条线
            connectorOverlays: [["Arrow", { width: 10, length: 10, location: 1 }]]
        };

    });




    
</script>